一、Linux命令的习惯
命令及参数区分大小写
- 程序可否执行与扩展名无关
- 使用tab键来补全命令
$command  [-options]    parameter1   parameter2  …
  指令       选项          参数1       参数2

说明：
1.	一行指令中第一个输入的绝对是‘指令(command)’或‘可执行文件’
2.	command 为指令的名称，例如变换路径的指令为 cd 等等；
3.	中刮号[]并不存在于实际的指令中，而加入参数设定时，通常为 - 号，例如 -h 有时候完整参数名称会输入 -- 符号，例如 --help；
4.	parameter1 parameter2.. 为依附在 option 后面的参数， 或者是 command 的参数； 
5.	command, -options, parameter1.. 这几个中间以空格来区分，不论空几格 shell 都视为一格； 
6.	按下 [Enter] 按键后，该指令就立即执行。
7.	指令太长的时候，可以使用 \ 符号来跳脱 [Enter] 符号， 使指令连续到下一行。注意！ \ 后就立刻接特殊字符。
8.	在 Linux 系统中，英文大小写字母是不一样的。举例来说， cd 与 CD 并不同。

二、常用命令

1.	cd 命令
	.	当前工作目录
	..	父目录
	~	用户家目录
	-	上个工作目录

2.	ls 显示目录
	用法：
		ls [参数] [目录名]
	参数：
		-a: 显示所有文件，包括隐藏文件(以.开头的文件)
		-l: 以长格式显示
		-t: 按修改时间先后显示
		-R: 显示目录及下级子目录结构（递归）
		-m: 横向输出文件名，并以“，”作分格符。 
		-S: 以文件大小排序。 

	用颜色代表不同文件
		白色：普通文件
		红色：压缩文件
		蓝色：目录文件
		浅蓝色：链接文件
		黄色：设备文件（/dev）
		绿色：可执行文件（/bin、/sbin）
		粉红色：图片文件

3.	tree 显示文件目录结构
	用法： 
		tree    [参数]   {文件}
	参数：
		-a 不隐藏任何以.字符开始的条目
		-d 只显示目录不显示文件
		-f 每个文件都显示路径
		-t 根据最后修改时间排序
		-L n 只显示n层目录 （n为数字）

4.	mkdir 建立目录
	用法：
		mkdir [参数] {目录名}
 	参数： 
 		-p 可以一次性创建整个目录树

5.	rmdir 删除目录（只能删除空目录）
	用法：rmdir [参数]{目录名}

6.	rm 删除文件和文件夹
	用法：
		rm  [参数]  {文件}
	参数： 
        -r   删除整个目录树
        -f   强制执行

7.	touch 创建空文件和更改时间戳
	用法：
		touch  [参数]   {文件}
	参数：
		-d 更改时间戳为定义值（后面加年月日，格式：20101212）

8.	cp 复制目录
	用法： 
		cp [参数] {原文件…} {目标文件}
	参数：  
		-r 递归执行 （可复制目录树）

9.	mv 移动或重命名文件
	用法：
		mv [参数] {原文件} {目标文件} 把原文件更名为目标文件
    	mv [参数] {原文件…} {目标文件} 把一个或多个文件同时移动到目标文件中

二、查看文档常用命令

1.	cat 由第一行开始显示文件的内容
	注意：
		cat命令显示文件时会同时显示所有内容。大型文件在屏幕上一晃而过，难以阅读。所以他比较适合小于一屏的文件。
	用法：
		cat [option] filename

2.	tac 从最后一行开始显示（反向显示）

3.	file 显示文件类型
	用法：
		file [option] filename

4.	more 管道显示
		空格键 (space)：代表向下翻一页； 
		Enter：代表向下翻『一行』； 
		/字符串：代表在这个显示的内容当中，向下搜索『字符串』这个关键词； 
		:f ：立刻显示出文件名以及目前显示的行数； 
		h 帮助
		b 或 [ctrl]-b ：代表往回翻页 
		q：退出 

5.	less 与 more 类似，less可以往前翻页！ ：
		空格键：向下翻一页； 
		[pagedown]：向下翻一页； 
		[pageup]：向上翻一页； 
		/字符串：向下搜索『字符串』； 
		?字符串 ：向上搜索『字符串』； 
		n：重复前一个搜索 
		N：反向的重复前一个搜索
		h：帮助
		q：退出

6.	head 显示文件开始几行
	用法：
		head [options] {file…}
	参数 ：
		–n  number查看前几行的值

7.	tail 显示文件最后几行
	用法：
		tail [options] {file…}
	参数：  
		–n number 查看后几行的值
	    –f 一直监视

8.	man 帮助文档
	路径：/usr/share/man
	用法： 
		man [参数] [查询名] 
		/   来查找
		q退出
		其他获得帮助的方法
		--help
		-h
		info  命令
		help  内置命令
		readme

9.	find
	①	不时间有关的选项：共有 -atime, -ctime 与 -mtime ，以 -mtime 说明 
		-mtime  n ：n 为数字，意义为在 n 天之前的『一天之内』被更改过内容的文件
		-mtime +n ：列出在 n 天之前(不含 n 天本身)被改动过内容的文件； 
		-mtime -n ：列出在 n 天之内(含n 天本身)被更改过内容的文件。 
		-newer file ：file 为一个存在参照物，列出比 file 还要新的文件 

		文件的 Access time，atime 是在读取文件或者执行文件时更改的。
		文件的 Modified time，mtime 是在写入文件时随文件内容的更改而更改的。
		文件的 Create time，ctime 是在写入文件、更改所有者、权限或链接设置时随Inode 的内容更改而更改的。 

	②	ls -lc filename 列出文件的 ctime
		ls -lu filename 列出文件的 atime
		ls -l filename 列出文件的 mtime

10. tar
	用法：
		tar [option] {file}
	参数：
		c: 建立压缩档案
		x：解压
		t：查看内容
		r：向压缩归档文件末尾追加文件
		u：更新原压缩包中的文件

	这五个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。下面的参数是根据需要在压缩或解压档案时可选的。

		z：有gzip属性的
		j：有bz2属性的
		Z：有compress属性的
		v：显示所有过程
		O：将文件解开到标准输出

	下面的参数-f是必须的
		f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名

	案例：
		*.tar 用 tar -xvf 解压
		*.gz 用 gzip -d或者gunzip 解压
		*.tar.gz和*.tgz 用 tar -xzf 解压
		*.bz2 用 bzip2 -d或者用bunzip2 解压
		*.tar.bz2用tar -xjf 解压
		*.Z 用 uncompress 解压
		*.tar.Z 用tar -xZf 解压
		*.rar 用 unrar e解压
		*.zip 用 unzip 解压
		
四、管道
	
1.	netstat -plant 查看端口
	netstat -plant | grep 80 查看80端口

2.	grep 选择排除
		-c 只输出匹配行的计数。
		-i 不区分大小写（只适用于单字符）。
		-h 查询多文件时不显示文件名。
		-l 查询多文件时只输出包含匹配字符的文件名。
		-n 显示匹配行及行号。
		-s 不显示不存在或无匹配文本的错误信息。
		-v 显示不包含匹配文本的所有行。

3.	sort 
		-r 反向排序

4.	cut 
		–d ‘分割符’ –f 取第几段

5.	uniq 
		–c 计数

6.	wc 
		–l 统计多少行

五、linux正则
	&&且
	||或
	几个概念：
	1.基本正则表达式   扩展的正则表达式  （由普通字符+元字符组成）
	2.通配                                            （由普通字符+元字符组成）
	3.元字符

	注意：正则表达式中元字符的意义和通配中元字符的意义有区别的


	bash shell本身不支持正则表达式，使用正则表达式的是shell的一些命令和工具，如grep,sed,awk等等
	但是bash可以使用正则表达式中的一些元字符实现通配的功能，此时的这些元字符叫通配符。
	此时通配中元字符的意义跟正则表达式中元字符的意义就不一样了。


	通配是指：将一个包含通配符的非具体的文件名扩展为计算机，服务器，网络上的一批具体的文件名的过程。


	基本正则表达式中元字符的意义如下：
	1.   *     匹配*前面的那一个字符的0次或多次
	如hel*o       heo  helo  hello  helllo  ......


	2.   .     匹配任意一个字符（只匹配一个，可以是空格）
	如ab.         abc  abd   ab3   ab   ......


	3.   ^     匹配行首，行首的字符序列必须是^后的字符序列
	如^suda       sudahuhuhuuuuuhuuh      sudaokokokokokoko   ......


	4.   &     匹配行尾，行尾的字符序列必须是$前的字符序列
	如suda$       jijijijijiiijijsuda     lkokokokokjijhuhsuda   ......
	特殊的  ^$      匹配一个空行
	           ^.$     匹配只有一个字符的空行


	5.   []    匹配字符集合中的任意一个字符（只匹配一个）
	如[1234]  [1-4]     匹配1，2，3，4的任意一个字符
	注意：^放在[]里面时，不再表示匹配行首，而是取反的意思
	[^1234]  [^1-4]       匹配不是1，2，3，4的任意一个字符
	[a-z][A-Z]*  匹配任意一个英文单词 




	6.   \     用于转义元字符，使之成为普通字符
	如\*       此时*表示一个普通字符




	7.   \<\>     用于精确匹配
	如\<the>\      表示精确匹配the这个单词，而不是them  then等等


	8.\{\}系列符号
	\{n\}       匹配前面字符的n次
	\{n,\}      匹配前面字符的至少n次
	\{n,m\}     匹配前面字符的n-m次，至少n次，至多m次


	如JO\{3\}B    匹配JOOOB
	如JO\{3,\}B   匹配JOOOB  JOOOOB   ......
	如JO\{3,6\}B  匹配JOOOB  JOOOOB   JOOOOOB   JOOOOOOB   



	扩展的正则表达式中元字符的意义如下：
	1.    ？    匹配前面的那一个字符的0次或1次
	如JO?B      匹配   JB     JOB    JOOB




	2.    +     匹配前面的那一个字符的1次或多次
	如JO+B      匹配   JOOB   JOOOB   ......




	3.    |与（）通常结合使用，表示一组可选的字符集合
	如re(a|o|e)d     匹配read  reod  reed
	等同于re[aoe]d       



	通配中的元字符的意义如下：
	1.     *       表示任意多的任意字符
	2.     ?       表示一个任意字符
	3.     ^       表示取反
	4.     []      同正则表达式的用法
	5.     {}      表示一组表达式的集合   {}中表达式是或的关系
	如ls -l  {*.cpp , [1234]*.c}            列出满足表达式*.cpp或者[1234]*.c的文件。

六、
1.	yum软件管理
		yum  install –y software   #安装软件
		yum  update  -y software    #更新软件
		yum  remove  -y software   #删除软件
		yum  list     #列出资源库中特定的可以安装或更新以及已经安装的rpm包
		yum grouplist # 累出所有软件包群组
		yum groupinstall   ‘包群组名’ # 安装软件包群组
		yum groupremove  ‘包群组名
		yum info    包名    #查看软件包信息
		yum search  包名 # 搜索
		yum clean all  #清除缓存

2.	yum安装lamp环境
	
	①	安装mysql
		yum -y install mysql mysql-server
		
		自启动：
		chkconfig --level 235 mysqld on

		启动服务：
		/etc/init.d/mysqld start
		 
		配置mysql的密码：
		mysqladmin -u root password 123456 (自行修改!!)
		mysql的配置文件：
		/etc/my.cnf

三、其它命令

1.	关机
	init 0

2.	重启
	Init 6
	reboot

3.	查看历史
	history

4.	环境变量
	echo $PATH => 显示环境变量

