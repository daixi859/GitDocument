{
    程序：指令和数据
    控制器：指令
    运算器：
    存储器：

    地址总线：内存寻址
    数据总线：传输数据
    控制总结：控制指令

    寄存器：CPU暂时存储器

    I/O: 硬盘

    程序
    INPUT设备：
    OUTPUT设备

    系统设定
    默认输出设备：标准输出，STDOUT, 1
    默认输入设备：标准输入, STDIN, 0
    标准错误输出：STDERR, 2
        
    标准输入：键盘
    标准输出和错误输出：显示器
}

一  IO重定向

1.  >, >>
    >: 覆盖输出
    >>：追加输出

2.  为了避免使用 > 可以使用set
    set -C: 不允许覆盖存在的文件。(禁止对已存在的文件使用覆盖重定向)
        强制覆盖输出，则使用 >|

    set +C: 关闭上述功能
    
3.  错误的输出重定向
    2>: 重定向错误输出
    2>>: 追加方式

4.  二种输出重定向方式
    > file 2> file: 保存在不同文件之中
    &>: 重定向标准输出或错误输出至同一个文件

5.  < 输入重定向
    exp:
        tr 'a-z' 'A-Z' < /etc/fstab

6.  <<: Here Document
    exp:
        # cat << END
        The first line.
        The second line.
        END

    exp:
        cat >> /tmp/myfile.txt << EOF
        The first line.
        The second line.
        END

二  管道
    
1.  把前一个命令的输出，当作后一个命令的输入

    命令1 | 命令2 | 命令3 |...

    exp: 
        # echo 'hello world' | tr 'a-z' 'A-Z'

    exp:
        # cut -d: -f1 /etc/passwd | sort | tr 'a-z' 'A-Z'

    exp: 只显示文件行数不显示文件
        wc -l /etc/passwd | cut -d' ' -f1

    exp: 
        ll /usr/bin/ | wc -l  (999，多个total 131196)
        ls /usr/bin/ | wc -l  (998)


2.  tee - read from standard input and write to standard output and files
    tee [OPTION]... [FILE]...

    exp:
        echo 'hello world' | tee ./hello.out

3.  练习：
a). 统计/usr/bin/目录下的文件个数；
    # ls /usr/bin | wc -l
b). 取出当前系统上所有用户的shell，要求，每种shell只显示一次，并且按顺序进行显示；
    # cut -d: -f7 /etc/passwd | sort -u
c). 思考：如何显示/var/log目录下每个文件的内容类型？
    # file /var/log/*
    # file `ls /var/log` (必须在 /var/log目录下)

d). 取出/etc/inittab文件的第6行；
    # head -6 /etc/inittab | tail -1
e). 取出/etc/passwd文件中倒数第9个用户的用户名和shell，显示到屏幕上并将其保存至/tmp/users文件中；
    # tail -9 /etc/passwd | head -1 | cut -d: -f1,7 | tee /tmp/users
f). 显示/etc目录下所有以pa开头的文件，并统计其个数；
    # ls -d /etc/pa* | wc -l
g). 不使用文本编辑器，将alias cls=clear一行内容添加至当前用户的.bashrc文件中；
    # echo "alias cls=clear" >> ~/.bashrc


四  grep

1.  grep: print lines matching a pattern
    
    grep, egrep, fgrep

    grep: 根据模式搜索文本，并将符合模式的文本行显示出来。
    Pattern: 文本字符和正则表达式的元字符组合而成匹配条件


2.  grep [OPTIONS] PATTERN [FILE...]
    -i, --ignore-case: 忽略大小写
    --color[=WHEN], --colour[=WHEN]
    -v, --invert-match: 只显示不匹配的行
    -o, --only-matching: 只显示匹配的字符串

    exp:
        grep 'root' /etc/passwd
    exp:
        alias grep='grep --color' >> ~/.bashrc
        source ~/.bashrc

五  REGular EXPression, REGEXP: 正则表达式

1.  匹配次数（贪婪模式）：
    *   匹配其前面的字符任意次  
        .*: 任意长度的任意字符

    \?  匹配其前面的字符1次或0次

    \{m,n\} 匹配其前面的字符至少m次，至多n次
        \{1,\}
        \{0,3\}

2.  位置锚定：
    ^   锚定行首，此字符后面的任意内容必须出现在行首
    $   锚定行尾，此字符前面的任意内容必须出现在行尾
    ^$  空白行

    \<或\b: 锚定词首，其后面的任意字符必须作为单词首部出现
    \>或\b: 锚定词尾，其前面的任意字符必须作为单词的尾部出现

3.  分组：
    \(\)
    \(ab\)*
    后向引用
    \1: 引用第一个左括号以及与之对应的右括号所包括的所有内容
    \2:
    \3: